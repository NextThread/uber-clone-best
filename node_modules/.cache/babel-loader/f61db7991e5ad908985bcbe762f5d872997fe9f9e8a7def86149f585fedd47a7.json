{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { setupListeners } from '@reduxjs/toolkit/query';\nimport { currentAddress } from '../Service/address';\nimport counterReducer from './slice';\nexport const store = configureStore({\n  reducer: {\n    root: counterReducer,\n    [currentAddress.reducerPath]: currentAddress.reducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(currentAddress.middleware)\n});\nsetupListeners(store.dispatch);\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\n\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}","map":{"version":3,"names":["configureStore","setupListeners","currentAddress","counterReducer","store","reducer","root","reducerPath","middleware","getDefaultMiddleware","concat","dispatch"],"sources":["/Users/binarybeast/uber-clone/src/Store/index.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport { setupListeners } from '@reduxjs/toolkit/query';\nimport { currentAddress } from '../Service/address';\nimport counterReducer from './slice';\n\nexport const store = configureStore({\n  reducer: {\n    root: counterReducer,\n    [currentAddress.reducerPath]: currentAddress.reducer,\n  },\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(currentAddress.middleware)\n});\n\nsetupListeners(store.dispatch);\n\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType <typeof store.getState>;\n\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,cAAc,QAAQ,oBAAoB;AACnD,OAAOC,cAAc,MAAM,SAAS;AAEpC,OAAO,MAAMC,KAAK,GAAGJ,cAAc,CAAC;EAClCK,OAAO,EAAE;IACPC,IAAI,EAAEH,cAAc;IACpB,CAACD,cAAc,CAACK,WAAW,GAAGL,cAAc,CAACG;EAC/C,CAAC;EACDG,UAAU,EAAGC,oBAAoB,IAAKA,oBAAoB,CAAC,CAAC,CAACC,MAAM,CAACR,cAAc,CAACM,UAAU;AAC/F,CAAC,CAAC;AAEFP,cAAc,CAACG,KAAK,CAACO,QAAQ,CAAC;;AAG9B;;AAGA"},"metadata":{},"sourceType":"module","externalDependencies":[]}